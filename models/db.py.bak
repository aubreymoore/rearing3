# -*- coding: utf-8 -*-

import datetime
import logging
import os

def get_configured_logger(name):
    """
    Code modified from Web2py Application Development Cookbook

    Logs messages to <appname>.log
    This file will grow without restraint, so it must be cleared from time to time.

    Logging levels are DEBUG, INFO, WARNING, ERROR, CRITICAL. 
    Set for handler and logger as needed below.
    """
    logger = logging.getLogger(name)
    if len(logger.handlers) == 0:
        formatter = "%(asctime)s %(levelname)s " + "%(funcName)s():%(lineno)d %(message)s"
        handler = logging.FileHandler('{}.log'.format(name))
        handler.setFormatter(logging.Formatter(formatter))
        handler.setLevel(logging.DEBUG)
        logger.addHandler(handler)
        logger.setLevel(logging.DEBUG)
        logger.debug(name + ' logger created')  # Test entry
    else:
        logger.debug(name + ' already exists')  # Test entry
    return logger

#### Assign application logger to a global var
logger = get_configured_logger(request.application)

# -------------------------------------------------------------------------
# This scaffolding model makes your app work on Google App Engine too
# File is released under public domain and you can use without limitations
# -------------------------------------------------------------------------

if request.global_settings.web2py_version < "2.14.1":
    raise HTTP(500, "Requires web2py 2.13.3 or newer")

# -------------------------------------------------------------------------
# if SSL/HTTPS is properly configured and you want all HTTP requests to
# be redirected to HTTPS, uncomment the line below:
# -------------------------------------------------------------------------
# request.requires_https()

# -------------------------------------------------------------------------
# app configuration made easy. Look inside private/appconfig.ini
# -------------------------------------------------------------------------
from gluon.contrib.appconfig import AppConfig

# -------------------------------------------------------------------------
# once in production, remove reload=True to gain full speed
# -------------------------------------------------------------------------
myconf = AppConfig(reload=True)

if not request.env.web2py_runtime_gae:
    # ---------------------------------------------------------------------
    # if NOT running on Google App Engine use SQLite or other DB
    # ---------------------------------------------------------------------
    db = DAL(myconf.get('db.uri'),
             pool_size=myconf.get('db.pool_size'),
             migrate_enabled=myconf.get('db.migrate'),
             check_reserved=['all'])
else:
    # ---------------------------------------------------------------------
    # connect to Google BigTable (optional 'google:datastore://namespace')
    # ---------------------------------------------------------------------
    db = DAL('google:datastore+ndb')
    # ---------------------------------------------------------------------
    # store sessions and tickets there
    # ---------------------------------------------------------------------
    session.connect(request, response, db=db)
    # ---------------------------------------------------------------------
    # or store session in Memcache, Redis, etc.
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
    # ---------------------------------------------------------------------

# -------------------------------------------------------------------------
# by default give a view/generic.extension to all actions from localhost
# none otherwise. a pattern can be 'controller/function.extension'
# -------------------------------------------------------------------------
response.generic_patterns = ['*'] if request.is_local else []
# -------------------------------------------------------------------------
# choose a style for forms
# -------------------------------------------------------------------------
response.formstyle = myconf.get('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other
response.form_label_separator = myconf.get('forms.separator') or ''

# -------------------------------------------------------------------------
# (optional) optimize handling of static files
# -------------------------------------------------------------------------
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

# -------------------------------------------------------------------------
# (optional) static assets folder versioning
# -------------------------------------------------------------------------
# response.static_version = '0.0.0'

# -------------------------------------------------------------------------
# Here is sample code if you need for
# - email capabilities
# - authentication (registration, login, logout, ... )
# - authorization (role based authorization)
# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
# - old style crud actions
# (more options discussed in gluon/tools.py)
# -------------------------------------------------------------------------

from gluon.tools import Auth, Service, PluginManager

# host names must be a list of allowed host names (glob syntax allowed)
auth = Auth(db, host_names=myconf.get('host.names'))
service = Service()
plugins = PluginManager()

# -------------------------------------------------------------------------
# create all tables needed by auth if not custom tables
# -------------------------------------------------------------------------
auth.define_tables(username=False, signature=False)

# -------------------------------------------------------------------------
# configure email
# -------------------------------------------------------------------------
mail = auth.settings.mailer
mail.settings.server = 'logging' if request.is_local else myconf.get('smtp.server')
mail.settings.sender = myconf.get('smtp.sender')
mail.settings.login = myconf.get('smtp.login')
mail.settings.tls = myconf.get('smtp.tls') or False
mail.settings.ssl = myconf.get('smtp.ssl') or False

# -------------------------------------------------------------------------
# configure auth policy
# -------------------------------------------------------------------------
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = True
auth.settings.reset_password_requires_verification = True

# -------------------------------------------------------------------------
# Define your tables below (or better in another model file) for example
#
# >>> db.define_table('mytable', Field('myfield', 'string'))
#
# Fields can be 'string','text','password','integer','double','boolean'
#       'date','time','datetime','blob','upload', 'reference TABLENAME'
# There is an implicit 'id integer autoincrement' field
# Consult manual for more options, validators, etc.
#
# More API examples for controllers:
#
# >>> db.mytable.insert(myfield='value')
# >>> rows = db(db.mytable.myfield == 'value').select(db.mytable.ALL)
# >>> for row in rows: print row.id, row.myfield
# -------------------------------------------------------------------------
########################################

db.define_table('bioassay',
    Field('name', type='string', required='True'),
    Field('tex', type='text'),
    format='%(name)s',
    )

db.define_table('btl',
    Field('jar', type='integer', label=T('Jar Number'), required=True),
    Field('date_checkin', type='date', default=datetime.datetime.now(), label=T('Checkin Date'), required=True),
    #Field('date_checkout', type='date', default=datetime.date(2100, 1, 1), label=T('Checkout Date'), required=True),
    Field('collection_source', type='string', label=T('Collection Source')),
    Field('collection_lifestage', type='string', requires=IS_EMPTY_OR(IS_IN_SET(['larva','pupa','adult'])), label=T('Collection Lifestage')),
    Field('sex', type='string', requires=IS_EMPTY_OR(IS_IN_SET(['male','female','undetermined'])), label=T('Sex')),
    Field('date_pupated', type='date', label=T('Date Pupated')),
    Field('date_eclosed', type='date', label=T('Date Eclosed')),
    Field('date_died', type='date', label=T('Date Died')),
    Field('bioassay_name', type='string', label=T('Bioassay Name')),
    Field('bioassay_treatment', type='string', label=T('Bioassay Treatment')),
    Field('date_start_bioassay', type='date', label=T('Date Treated')),
    Field('date_end_bioassay', type='date', label=T('Bioassay End Date')),
    Field('notes', type='string', label=T('Notes')),
    auth.signature,
    #Field('pm_image'),
    #format='%(f_jar)s-%(f_collection_date)s',
    )

# The following code prevents insertion of jar and date_checkin pairs which are not unique.

def check_btl_dups(r):
    result = db.executesql('select * from btl where jar={} and date_checkin="{}";'.format(r['jar'], r['date_checkin']))
    if result:
        logger.error('Record not inserted. Btl table already contains a record with jar {} and date_checkin {}: {}'.
                       format(r['jar'], r['date_checkin'], result))
        return True
    else:
        logger.debug('Record inserted for jar {}'.format(r['jar']))
        return False

db.btl._before_insert.append( check_btl_dups )

# db.btl.drop() # drops table and resets id to start at 1

########################################

db.define_table('obs',
    Field('btl', db.btl, required=True),
    Field('date_observed', type='date', label=T('Date Observed'), required=True),
    Field('mass', type='integer', label=T('Mass')),
    Field('notes', type='string', label=T('Notes')),
    auth.signature,
    #format='%(f_beetle)s',
    )

# The following code prevents inserting duplicate records into the obs table
def check_obs_dups(r):
    if db.executesql('select * from obs where btl={} and date_observed="{}";'.format(r['btl'], r['date_observed'])):
        session.flash=('btl: {}; date_observed: {}; Record not inserted. Obs table already contains a record with these values.'.
                       format(r['btl'], r['date_observed']))
        logger.debug('btl: {}; date_observed: {}; Record not inserted. Obs table already contains a record with these values.'.
                       format(r['btl'], r['date_observed']))
        return True
    else:
        logger.debug('btl: {}; date_observed: {}; Record inserted.'.format(r['btl'], r['date_observed']))
        return False

db.obs._before_insert.append( check_obs_dups )



# -------------------------------------------------------------------------
# after defining tables, uncomment below to enable auditing
# -------------------------------------------------------------------------
# auth.enable_record_versioning(db)
